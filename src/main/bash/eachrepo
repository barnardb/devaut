#!/usr/bin/env bash

set -e
set -u
set -o pipefail

scripting_dir="$(dirname "$BASH_SOURCE")/scripting"
source "${scripting_dir}/color.sh"


usage() {
    echo "usage: eachrepo [--sequential] [--] <command> [<argument>...]"
}

show_help() {
    usage
    cat <<'EOF'

`eachrepo` makes it easy to issue a command in all git repositories under the current directory.
Commands are issued in parallel using [GNU Parallel] unless the --sequential flag is provided.

For example, you might find `eachrepo git fetch` useful before disconnecting from a network.

Dependencies:

* [GNU Parallel]

[GNU Parallel]: http://www.gnu.org/software/parallel/
EOF
}

parallel=true

while (( $# > 0 )); do
    case "$1" in
        --sequential) parallel=false;;
        -'?' | --help) show_help; exit;;
        --) shift; break;;
        -*) usage_error "unknown option $1" "Use -? or --help for help, or -- to separate arguments from options";;
        *) break;;
    esac
    shift
done

[ $# -gt 0 ] || usage_error "missing command"

script_path="${BASH_SOURCE[0]}"
while [ -h "${script_path}" ]; do script_path="$(readlink "${script_path}")"; done
_scripting_dir="$(cd "$(dirname "${script_path}")" && pwd)/scripting"
export _scripting_dir

run_in_dir() {
    repo="$(basename "$1")"
    cd "$1"
    shift
    echo
    echo "In ${repo}"
    "$@" || {
        exit_status=$?
        . "${_scripting_dir}/color.sh"
        fail "exit status ${exit_status} in ${repo}"
    }
    exit
}

export -f run_in_dir

find_git_worktrees() {
    find . -depth 1 -type d -not \( -name '.*' -prune \) -execdir test -d {}/.git ';' -prune "$@"
}

if [ "${parallel}" = "true" ] && which -s parallel; then
    find_git_worktrees -print0 | exec parallel -0 --group -j 0 run_in_dir {} "$(printf '%q ' "$@")" ';'
else
    find_git_worktrees -exec bash -c 'run_in_dir "$@"' - {} "$@" ';'
fi
