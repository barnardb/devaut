#!/usr/bin/env bash

set -e
set -u
set -o pipefail

scripting_dir="$(dirname "$BASH_SOURCE")/scripting"
source "${scripting_dir}/color.sh"


usage() {
    echo "usage: push [OPTIONS...] [--] [<commit-ish>]"
}

show_help() {
    usage
    cat <<'EOF'

`push` helps you get all of your amazing commits pushed upstream,
without letting obvious accidents slip through.

It will validate and push commits that haven't yet been pushed upstream.
Commits are validated by running them in a shadow worktree using [git-new-workdir],
so that you can keep on working while the build is running.

[git-new-workdir]: https://github.com/git/git/blob/master/contrib/workdir/git-new-workdir

The current branch is pushed by default, or you can specify the commit-ish
(branch, commit, HEAD, â€¦) to use.

The following options are available:

    --all-at-once
        Validate only the last commit and push everything at once,
        instead of validating and pushing each new commit individually.

    --build-command <command>
        Use the given command to test each commit. Suppresses looking for a `go`
        or `pre-commit.sh` script in the worktree root or trying to guess what
        kind of project is in the repo and run a default command.

    --dry-run
        Do everything *except* `git push`. This is a convenient way to validate
        commits in a clean environment without pushing.

    --force
        **Potentially Destructive** and unrecommended!
        Build and push even if pushing won't be a fast-forward update,
        using `git push --force`. Implies --no-fetch.

    --if-needed
        Exit with status 0 even if there is nothing to push.

    --no-clean
        Suppress cleaning the worktree before each build.

    --no-fetch
        Skip the initial `git fetch` that gets us fresh data for the fail-fast
        check that our updates are fast-forward.

    --to-remote-ref <ref>
        Push to the specified ref on the remote system, instead of deriving the
        ref by splitting the @{upstream} branch into a remote name and ref.

Happy pushing :)
EOF
}

all_at_once=false
dry_run=false
force=false
if_needed=false
perform_fetch=true
clean=true
declare -a build_command
declare -a to_remote_ref

non_empty_arg() {
    [ -n "$2" ] || usage_error "the argument to $1 cannot be empty"
    echo "$2"
}

while (( $# > 0 )); do
    case "$1" in
        --all-at-once) all_at_once=true;;
        --dry-run) dry_run=true;;
        --force) force=true;;
        --build-command) shift; build_command=($(non_empty_arg --build-command "$1"));;
        --if-needed) if_needed=true;;
        --no-fetch) perform_fetch=false;;
        --no-clean) clean=false;;
        --to-remote-ref) shift; to_remote_ref="$(non_empty_arg --to-remote-ref "$1")";;
        -'?' | --help) show_help; exit;;
        --) shift; break;;
        -*) usage_error "unknown option $1" "Use '--' to separate arguments from options";;
        *) break;;
    esac
    shift
done

[ $# -le 1 ] || usage_error "unexpected arguments: $*"

cd "$(git rev-parse --show-toplevel)"

if [ "${dry_run}" = "true" ]; then
    warn "This is a DRY RUN: Nothing will actually be pushed"
fi

to_push="$(git rev-parse "${1-HEAD}")"
echo "Last commit to push ${to_push}"

if [ "${force}" != true ] && [ "${perform_fetch}" = true ]; then
    git fetch
fi

upstream="$(git rev-parse --abbrev-ref --symbolic-full-name '@{upstream}')"
remote_branch="${upstream#*/}"
if [ "${remote_branch}" = "${upstream}" ]; then
    [ -z "${to_remote_ref}" ] ||
        fail "--to-upstream-ref was specified, but found local upstream ${upstream}"
    echo "Using local branch ${upstream} as \"remote\" branch to \"push\" to"
else
    remote="${upstream%/*}"
    [ "${remote}/${remote_branch}" = "${upstream}" ] ||
        fail "Remote ${remote} and branch ${remote_branch} do not add up to upstream ${upstream}"
    [ -n "${to_remote_ref-}" ] || to_remote_ref="${remote_branch}"
    echo "Will push to ref ${to_remote_ref} on remote ${remote}"
fi

upstream_commit="$(git rev-parse "${upstream}")"
echo "Upstream ${upstream} is at ${upstream_commit}"
if [ "${to_push}" = "${upstream_commit}" ]; then
    case "${if_needed}" in
        true)
            success "Nothing to push."
            exit
            ;;
        *)
            fail "commit to push is the same as upstream ${upstream}. Nothing to push."
            ;;
    esac
fi

merge_base="$(git merge-base "${to_push}" "${upstream_commit}")"
if [ "${merge_base}" != "${upstream_commit}" ]; then
    if [ "${force}" = true ]; then
        warn "WARNING (would be error, but --force specified): merge-base is ${merge_base}, which is not the same as upstream ${upstream}."
    else
        fail "merge-base is ${merge_base}, which is not the same as upstream ${upstream}. Please rebase."
    fi
fi

if [ "${all_at_once}" = false ]; then
    to_push=($(git rev-list --reverse "${upstream_commit}..${to_push}"))
    echo "Total of ${#to_push[@]} commits to push:"
    printf "%s\n" "${to_push[@]}"
fi

original_dir="$PWD"
workdir="$(dirname "${original_dir}")/.$(basename "${original_dir}")-workdir"
[ -e "${workdir}" ] || {
    echo "Creating new shadow working directory ${workdir}"
    PATH="$PATH:/usr/local/share/git-core/contrib/workdir"
    hash git-new-workdir 2>/dev/null || fail "push needs git-new-workdir from git contrib to be on the path on in /usr/local/share/git-core/contrib/workdir"
    git-new-workdir "${original_dir}" "${workdir}" "${to_push[0]}"
}

echo "Moving to shadow working directory ${workdir}"
cd "${workdir}"

for commit in "${to_push[@]}"; do
    status "Preparing to validate and push $commit"
    git checkout --quiet --force "${commit}"

    if [ "${clean}" = true ]; then
        git clean -fxd
    fi

    link_exclusions=()
    for path in .cache cache go; do
        original="${original_dir}/${path}"
        if ! [ -e "${path}" ] && [ -e "${original}" ]; then
            echo "Linking ${path} to ${original}"
            ln -s "${original}" "${path}"
            link_exclusions+=(--exclude "${path}")
        fi
    done

    if [ -n "${build_command-}" ]; then
        echo "Using provided build runner"
    elif [ -e go ]; then
        build_command=(./go)
    elif [ -e pre-commit.sh ]; then
        build_command=(./pre-commit.sh)
    elif [ -e build/sbt ]; then
        build_command=(./build/sbt +clean +test +doc +package)
    elif ls ./*.sbt &>/dev/null || ls ./project/*.sbt &>/dev/null || ls ./project/*.scala &>/dev/null; then
        build_command=(sbt +clean +test +doc +package)
    elif [ -f pom.xml ]; then
        build_command=(mvn clean test)
    elif [ -f .ruby-version ] && [ -f .ruby-gemset ] && [ -f Gemfile ] && [ -f Gemfile.lock ] && [ -d spec ]; then
        build_command=(rspec)
    else
        fail "Couldn't find a runner for this project"
    fi
    # prevent idle sleep under MacOS during build
    if [[ "$OSTYPE" == darwin* ]]; then
        build_command=(caffeinate -i -- "${build_command[@]}")
    fi

    status "Building using:$(printf ' %q' "${build_command[@]}")"
    "${build_command[@]}"

    if [ "${clean}" = true ] && [ -n "$(set +u && git ls-files --modified --others --exclude-standard "${link_exclusions[@]}")" ]; then
        fail "Unstaged changes after a successful build run! $(git status)"
    fi

    status "$commit validated; pushing"
    if [ "${dry_run}" = true ]; then
        warn "Skipping push due to DRY RUN"
    elif [ "${remote_branch}" = "${upstream}" ]; then
        git rebase "${commit}" "${remote_branch}"
    elif [ "${force}" = true ]; then
        git push --force "${remote}" "${commit}:${to_remote_ref}"
    else
        git push "${remote}" "${commit}:${to_remote_ref}"
    fi
done

if [ "${dry_run}" = true ]; then
    result="would have pushed (but for DRY RUN)"
else
    result="pushed"
fi
success "SUCCESS: ${result} ${to_push[*]} to ${remote}/${to_remote_ref}"
