#!/usr/bin/env bash

set -e
set -u
set -o pipefail

scripting_dir="$(dirname "$BASH_SOURCE")/scripting"
source "${scripting_dir}/color.sh"


usage() {
    echo "usage: push [--build-command <command> | --all-at-once | --dry-run | --force | --if-needed | --no-fetch]... [--] [<commit-ish>]"
}

show_help() {
    usage
    cat <<'EOF'

`push` helps you get all of your amazing commits pushed upstream,
without letting obvious accidents slip through.

It will validate and push commits that haven't yet been pushed upstream.
Commits are validated by running them in a shadow worktree using [git-new-workdir],
so that you can keep on working while the build is running.

The build command can either be specified using `--build-command` or `push` will
fallback to some default build commands, such as `go` or `pre-commit.sh` scripts in
the project root or a standard sbt project.

The current branch is pushed by default, or you can specify the commit-ish (branch, commit, HEAD, â€¦) to use.

The first step is a check to make sure you have a fast-forward commit,
unless `--force` is used to push with the **potentially destructive** and unrecommended `--force` option on `git push`.
To ensure we have the current remote state,
the fast-forward check is preceeded by a call to `git fetch` unless disabled with the `--no-fetch` flag.

Each commit is validated and pushed individually, or you can `push --all-at-once`.

Use `--dry-run` to do everything *except* the final push.
This is a convenient way to validate commits in a clean environment without pushing.

You'll get an error message and non-zero exit status if there's nothing to push,
but you can `push --if-needed` to have your shell keep its cool.

Happy pushing :)

Dependencies:

* [git-new-workdir]

[git-new-workdir]: https://github.com/git/git/blob/master/contrib/workdir/git-new-workdir
EOF
}

all_at_once=false
dry_run=false
force=false
if_needed=false
perform_fetch=true
clean_shadow=true
declare -a build_command

while (( $# > 0 )); do
    case "$1" in
        --all-at-once) all_at_once=true;;
        --dry-run) dry_run=true;;
        --force) force=true;;
        --build-command) shift; build_command=($1);;
        --if-needed) if_needed=true;;
        --no-fetch) perform_fetch=false;;
        --no-clean-shadow) clean_shadow=false;;
        -'?' | --help) show_help; exit;;
        --) shift; break;;
        -*) usage_error "unknown option $1" "Use '--' to separate arguments from options";;
        *) break;;
    esac
    shift
done

[ $# -le 1 ] || usage_error "unexpected arguments: $*"

cd "$(git rev-parse --show-toplevel)"

if [ "${dry_run}" = "true" ]; then
    warn "This is a DRY RUN: Nothing will actually be pushed"
fi

to_push="$(git rev-parse "${1-HEAD}")"
echo "Last commit to push ${to_push}"

if [ "${force}" != true ] && [ "${perform_fetch}" = true ]; then
    git fetch
fi

upstream="$(git rev-parse --abbrev-ref --symbolic-full-name '@{upstream}')"
remote_branch="${upstream#*/}"
if [ "${remote_branch}" = "${upstream}" ]; then
    echo "Using local branch ${upstream} as \"remote\" branch to \"push\" to"
else
    remote="${upstream%/*}"
    [ "${remote}/${remote_branch}" = "${upstream}" ] ||
        fail "Remote ${remote} and branch ${remote_branch} do not add up to upstream ${upstream}"
    echo "Found upstream ${upstream} on remote ${remote}"
fi

upstream_commit="$(git rev-parse "${upstream}")"
echo "Upstream ${upstream} is at ${upstream_commit}"
if [ "${to_push}" = "${upstream_commit}" ]; then
    case "${if_needed}" in
        true)
            success "Nothing to push."
            exit
            ;;
        *)
            fail "commit to push is the same as upstream ${upstream}. Nothing to push."
            ;;
    esac
fi

merge_base="$(git merge-base "${to_push}" "${upstream_commit}")"
if [ "${merge_base}" != "${upstream_commit}" ]; then
    if [ "${force}" = true ]; then
        warn "WARNING (would be error, but --force specified): merge-base is ${merge_base}, which is not the same as upstream ${upstream}."
    else
        fail "merge-base is ${merge_base}, which is not the same as upstream ${upstream}. Please rebase."
    fi
fi

if [ "${all_at_once}" = false ]; then
    to_push=($(git rev-list --reverse "${upstream_commit}..${to_push}"))
    echo "Total of ${#to_push[@]} commits to push:"
    printf "%s\n" "${to_push[@]}"
fi

original_dir="$PWD"
workdir="$(dirname "${original_dir}")/.$(basename "${original_dir}")-workdir"
[ -e "${workdir}" ] || {
    echo "Creating new shadow working directory ${workdir}"
    PATH="$PATH:/usr/local/share/git-core/contrib/workdir" git-new-workdir "${original_dir}" "${workdir}" "${to_push[0]}"
}

echo "Moving to shadow working directory ${workdir}"
cd "${workdir}"

for commit in "${to_push[@]}"; do
    status "Preparing to validate and push $commit"
    git checkout --quiet --force "${commit}"

    if [ "${clean_shadow}" = true ]; then
        git clean -fxd
    fi

    link_exclusions=()
    for path in .cache cache go; do
        original="${original_dir}/${path}"
        if ! [ -e "${path}" ] && [ -e "${original}" ]; then
            echo "Linking ${path} to ${original}"
            ln -s "${original}" "${path}"
            link_exclusions+=(--exclude "${path}")
        fi
    done

    if [ -n "${build_command-}" ]; then
        echo "Using provided build runner"
    elif [ -e go ]; then
        build_command=(./go)
    elif [ -e pre-commit.sh ]; then
        build_command=(./pre-commit.sh)
    elif [ -e build/sbt ]; then
        build_command=(./build/sbt +clean +test +doc +package)
    elif ls ./*.sbt &>/dev/null || ls ./project/*.sbt &>/dev/null || ls ./project/*.scala &>/dev/null; then
        build_command=(sbt +clean +test +doc +package)
    elif [ -f pom.xml ]; then
        build_command=(mvn clean test)
    else
        fail "Couldn't find a runner for this project"
    fi
    # prevent idle sleep under MacOS during build
    if [[ "$OSTYPE" == darwin* ]]; then
        build_command=(caffeinate -i -- "${build_command[@]}")
    fi

    status "Building using:$(printf ' %q' "${build_command[@]}")"
    "${build_command[@]}"

    if [ "${clean_shadow}" = true ] && [ -n "$(set +u && git ls-files --modified --others --exclude-standard "${link_exclusions[@]}")" ]; then
        fail "Unstaged changes after a successful build run! $(git status)"
    fi

    status "$commit validated; pushing"
    if [ "${dry_run}" = true ]; then
        warn "Skipping push due to DRY RUN"
    elif [ "${remote_branch}" = "${upstream}" ]; then
        git rebase "${commit}" "${remote_branch}"
    elif [ "${force}" = true ]; then
        git push --force "${remote}" "${commit}:${remote_branch}"
    else
        git push "${remote}" "${commit}:${remote_branch}"
    fi
done

if [ "${dry_run}" = true ]; then
    result="would have pushed (but for DRY RUN)"
else
    result="pushed"
fi
success "SUCCESS: ${result} ${to_push[*]} to ${upstream}"
